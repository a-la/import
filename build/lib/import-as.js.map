{"version":3,"sources":["../../src/lib/import-as.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEjC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC;EACxE,MAAM,CAAC;AACT;;AAEA,KAAK,CAAC,QAAQ,CAAC;AACf;EACE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAC9E,WAAW,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IACpE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG;IAC7C,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACjC,GAAG,CAAC;IACJ,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;MACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IACrE,CAAC,CAAC,IAAI,CAAC;MACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC;IACA,MAAM,CAAC;EACT,CAAC;AACH;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"lib/import-as.js","sourcesContent":["import { replaceRequire } from '.'\n\nconst makeDefaultIf = (name) => {\n  const i = `if (${name} && ${name}.__esModule) ${name} = ${name}.default;`\n  return i\n}\n\nconst importAs =\n{\n  re: /( *import\\s+(?:(.+?)\\s*,\\s*)?\\*\\s+as\\s+(.+?))(\\s+from\\s+([\"'])(.+?)\\5)/gm,\n  replacement(match, importSeg, defName, varName, fromSeg, quotes, src) {\n    const r = replaceRequire(fromSeg, quotes, src)\n    const { length } = importSeg.split('\\n')\n    const ws = '\\n'.repeat(length - 1)\n    let c\n    if (defName) {\n      c = `${ws}let ${varName} = ${defName}${r} ${makeDefaultIf(defName)}`\n    } else {\n      c = `${ws}const ${varName}${r}`\n    }\n    return c\n  },\n}\n\nexport default importAs\n"]}