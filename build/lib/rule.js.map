{"version":3,"sources":["../../src/lib/rule.js"],"names":[],"mappings":"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","file":"lib/rule.js","sourcesContent":["import {\n  getRequire, getDefault, getSource, replaceRequire, advancedFromRe,\n  simpleFromRe,\n  getSrcFromMarkers,\n} from '.'\n\nconst importRe = /^ *import(\\s+([^\\s,]+)\\s*,?)?(\\s*{(?:[^}]+)})?/\n\nexport const advancedRe = new RegExp(\n  `${importRe.source}${advancedFromRe.source}`, 'gm'\n)\nexport const re = new RegExp(\n  `${importRe.source}${simpleFromRe.source}`, 'gm'\n)\n\n/**\n * Remaps `as` into `:`.\n * @param {string} namedSeg The segment containing named imports, e.g., `{ test, test2 as alias2 }`.\n */\nconst aliasesToDestructuring = (namedSeg) => {\n  const mm = namedSeg.replace(\n    /(\\s+)as(\\s+)/g,\n    (_, b, a) => {\n      const bb = b.split('\\n').length == 1 ? '' : b\n      return `${bb}:${a}`\n    })\n  return mm\n}\nconst replaceDefault = (def, replacement) => {\n  const d = def\n    .replace(',', '')\n    .replace(/([^\\s]+)/, replacement)\n  return d\n}\n\nconst getRes = (src, defSeg, defName, quotes, namedSeg, fromSeg, config) => {\n  const source = getSource(src, config)\n  const replacedDefault = getDef(defSeg, defName, quotes, source)\n  const replacedNamed = getNamed(namedSeg, fromSeg, quotes, source, defName)\n  const res = [\n    replacedDefault,\n    replacedNamed,\n  ]\n    .filter(a => a)\n    .join(' ')\n  return res\n}\n\nexport const advancedRule = {\n  re: advancedRe,\n  replacement(match, defSeg, defName, namedSeg, fromSeg, sd, ld) {\n    const { src, quotes } = getSrcFromMarkers(sd, ld, this)\n    // a special case because regexes are replaced before literals\n    const s = src.replace(this.markers.regexes.regExp, (m, i) => {\n      const val = this.markers.regexes.map[i]\n      return val\n    })\n    const res = getRes(s, defSeg, defName, quotes, namedSeg, fromSeg, this.config)\n    return res\n  },\n}\n\n/**\n * A rule to replace `import { method } from 'package'` statement.\n * @type {import('restream').Rule}\n */\nconst rule = {\n  re,\n  replacement(match, defSeg, defName, namedSeg, fromSeg, quotes, src) {\n    const res = getRes(src, defSeg, defName, quotes, namedSeg, fromSeg, this.config)\n    return res\n  },\n}\n\nconst getDef = (defSeg, defName, quotes, src) => {\n  if (!defSeg) return null\n  const req = getRequire(quotes, src)\n  const dd = getDefault(defName, req)\n  const d = replaceDefault(defSeg, dd)\n  const s = `let${d}`\n  return s\n}\n\nconst getNamed = (namedSeg, fromSeg, quotes, src, defName) => {\n  if (!namedSeg) return null\n  const r = replaceRequire(fromSeg, quotes, src, defName)\n  const n = aliasesToDestructuring(namedSeg)\n  const s = `const${n}${r}`\n  return s\n}\n\nexport default rule"]}